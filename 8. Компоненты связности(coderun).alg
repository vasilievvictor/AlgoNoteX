{"note":"Дан неориентированный невзвешенный граф, состоящий из N вершин и M ребер. Необходимо посчитать количество его компонент связности и вывести их.\n\nНапомним:\n\nКомпонента связности в неориентированном графе - это подмножество вершин, таких что все вершины достижимы друг из друга.\n\nФормат ввода\nВо входном файле записано два числа N и M (0 < N ≤ 100000, 0 ≤ M ≤ 100000). В следующих M строках записаны по два числа i и j (1 ≤ i, j ≤ N), которые означают, что вершины i и j соединены ребром.\n\nФормат вывода\nВ первой строчке выходного файла выведите количество компонент связности. Далее выведите сами компоненты связности в следующем формате: в первой строке количество вершин в компоненте, во второй - сами вершины в произвольном порядке.\n\nОграничения\nОграничение времени 2 с\nОграничение памяти 256 МБ","swiftCode":"import Foundation\n\nlet nm = readLine()!.split(separator: \" \").map({Int($0)!})\nvar node = Array(repeating: [Int](), count: nm[0] + 1)\nvar comp = Array(repeating: 0, count: nm[0] + 1)\nvar count = 0\n\nfor _ in 0..<nm[1]{\n    let temp = readLine()!.split(separator: \" \").map({Int($0)!})\n    node[temp[0]].append(temp[1])\n    node[temp[1]].append(temp[0])\n}\n\nfor i in 1...nm[0]{\n    \n    if comp[i] == 0{\n        count += 1\n        comp[i] = count\n        var stack = [Int]()\n        stack.append(i)\n        \n        \/\/\n        while stack.count > 0 {\n            let current = stack.popLast()!\n            \n            for next in node[current]{\n                if comp[next] == 0{\n                    comp[next] = count\n                    stack.append(next)\n                }\n            }\n        }\n    }\n}\n\nprint(count)\n\nvar ans = Array(repeating: [Int](), count: count + 1)\nfor i in 1...nm[0]{\n    ans[comp[i]].append(i)\n}\n\nfor i in 1...count{\n    print(ans[i].count)\n    print(ans[i].map({String($0)}).joined(separator: \" \") )\n}","pythonCode":"","nameZD":"8. Компоненты связности","cppCode":"","tests":[{"input":"6 4\n3 1\n1 2\n5 4\n2 3","expectedOutput":"3\n3\n1 2 3\n2\n4 5\n1\n6","id":"D40D7CA6-143C-4B0C-B608-2AF9DC279DAB"},{"input":"6 4\n4 2\n1 4\n6 4\n3 6","expectedOutput":"2\n5\n1 2 3 4 6\n1\n5","id":"57FAAD26-A69C-42FA-B812-CAD502CBA8B7"}],"url":"https:\/\/coderun.yandex.ru\/problem\/connectivity-components\/"}